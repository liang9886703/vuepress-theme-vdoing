(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{413:function(_,v,r){"use strict";r.r(v);var t=r(7),a=Object(t.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"存储结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#存储结构"}},[_._v("#")]),_._v(" 存储结构")]),_._v(" "),v("p",[_._v("段、区、页、行整体结构")]),_._v(" "),v("p",[v("img",{attrs:{src:"/%E9%9D%A2%E8%AF%95/image-20240118195317977.png",alt:"image-20240118195317977"}})]),_._v(" "),v("p",[v("strong",[_._v("页结构")])]),_._v(" "),v("p",[v("img",{attrs:{src:"/%E9%9D%A2%E8%AF%95/image-20240125143415051.png",alt:"image-20240125143415051"}})]),_._v(" "),v("p",[_._v("每插入一条记录都是追加写入页中，记录之间的逻辑顺序通过指针来体现，因此对于逻辑上主键相邻的记录，实际可能不相邻甚至在不同页")]),_._v(" "),v("p",[v("strong",[_._v("为什么用分组的方式组织行记录：")])]),_._v(" "),v("p",[_._v("缓解页分裂次数和移动次数：不用分组，每插入一条数据都要判断是否需要页分裂，采用分组，则每组最后一条记录才会引发页分裂")]),_._v(" "),v("p",[v("strong",[_._v("行格式（compact格式）：")])]),_._v(" "),v("p",[_._v("变长字段长度")]),_._v(" "),v("p",[v("img",{attrs:{src:"/%E9%9D%A2%E8%AF%95/image-20240118203946355.png",alt:""}})]),_._v(" "),v("p",[_._v("变长字段长度：对于变长字段列顺序逆序存放长度，使得双指针能从中间向两边读，提高缓存命中率")]),_._v(" "),v("p",[_._v("NULL值列表：对于允许存在NULL值的列，每个列对于一个二进制位")]),_._v(" "),v("p",[_._v("记录头信息：删除标记、下一条记录的位置、当前记录的类型（普通类型，非叶子节点、最小记录，最大记录）")]),_._v(" "),v("p",[_._v("行大小为2^16-1(64kb)，行溢出（超过一页大小了）的数据放在溢出页，保留20字节存储指向溢出页的地址")]),_._v(" "),v("p",[v("strong",[_._v("单表能放多少行")])]),_._v(" "),v("p",[_._v("单表大小由：")]),_._v(" "),v("p",[_._v("B+树的高度为3")]),_._v(" "),v("p",[_._v("能有多少个叶子节点：15KB可用，有三层高度，1280 * 1280 *（叶子节点能放几个不确定，如果一行1KB，那就是）15≈2000W行数据")]),_._v(" "),v("p",[_._v("叶子节点能容纳的数据行数：16KB约15KB可用，索引项由4B的页号+8B主键构成共12B，即可存放约1280个索引项")]),_._v(" "),v("h1",{attrs:{id:"mysql的一次查询流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mysql的一次查询流程"}},[_._v("#")]),_._v(" mysql的一次查询流程")]),_._v(" "),v("p",[_._v("一次查询：")]),_._v(" "),v("ol",[v("li",[_._v("连接器：通过TCP建立连接")]),_._v(" "),v("li",[_._v("查询缓存：KV形式保存（K为查询语句，V为结果）")]),_._v(" "),v("li",[_._v("解析器：词法分析（提取关键字）、语法分析（构建语法树）")]),_._v(" "),v("li",[_._v("预处理：查询表和字段是否存在，扩展*")]),_._v(" "),v("li",[_._v("优化器：根据查询成本确定查询策略")]),_._v(" "),v("li",[_._v("执行器：调用存储引擎API交互，一次获取一个记录")])]),_._v(" "),v("p",[v("img",{attrs:{src:"/%E9%9D%A2%E8%AF%95/image-20240829145839159.png",alt:"image-20240829145839159"}})]),_._v(" "),v("p",[_._v("主键查询：")]),_._v(" "),v("ol",[v("li",[_._v("调用存储引擎的接口定位到第一条记录，将完整记录返回给server层")]),_._v(" "),v("li",[_._v("server层判断是否符合条件，符合则发给客户端")]),_._v(" "),v("li",[_._v("进行下一次查询")])]),_._v(" "),v("p",[_._v("带索引下推的查询：")]),_._v(" "),v("ol",[v("li",[_._v("调用存储引擎的接口定位到第一条记录")]),_._v(" "),v("li",[_._v("储存引擎判断是否符合索引条件，符合则回表给server层")]),_._v(" "),v("li",[_._v("server层判断其他查询条件是否成立，成立则返给客户端")]),_._v(" "),v("li",[_._v("进行下一次查询")])]),_._v(" "),v("p",[v("code",[_._v("select * from t_user where age > 20 and reward = 100000;")])]),_._v(" "),v("p",[_._v("区别在于将"),v("code",[_._v("reward = 100000")]),_._v("这一部分放到server层还是储存引擎层，放在引擎层判断再返给客户端，减少了不必要的回表，放到server层，每次符合age>20的数据都要回表，后在server层判断再回给客户端")]),_._v(" "),v("p",[v("img",{attrs:{src:"/%E9%9D%A2%E8%AF%95/image-20240123211754999.png",alt:"image-20240123211754999"}})]),_._v(" "),v("h2",{attrs:{id:"b-、b-、b-树"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#b-、b-、b-树"}},[_._v("#")]),_._v(" B+、B-、B*树")]),_._v(" "),v("h1",{attrs:{id:"索引分类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#索引分类"}},[_._v("#")]),_._v(" 索引分类")]),_._v(" "),v("p",[_._v("索引属于页的一种，因此和页的结构类似，注意区别是用户记录存储索引记录，数据页存的是数据")]),_._v(" "),v("p",[_._v("单列索引、组合索引（联合索引）、")]),_._v(" "),v("p",[_._v("普通索引、唯一索引、主键索引（聚簇索引）、前缀索引")]),_._v(" "),v("p",[_._v("主键索引（聚簇索引）、二级索引（辅助索引）")]),_._v(" "),v("p",[_._v("索引合并")]),_._v(" "),v("p",[v("strong",[_._v("主键索引（聚簇索引）")])]),_._v(" "),v("ul",[v("li",[_._v("如果有主键，使用主键作为聚簇索引的索引键")]),_._v(" "),v("li",[_._v("没有主键，选择第一个不包含NULL值的唯一列为聚簇索引的索引键")]),_._v(" "),v("li",[_._v("上面两个都没有则自动生成一个隐式自增id"),v("code",[_._v("row_id")]),_._v("列作为聚簇索引的索引键")])]),_._v(" "),v("p",[v("strong",[_._v("二级索引（辅助索引）")])]),_._v(" "),v("p",[_._v("通过二级索引查找到主键值，再通过主键索引找到叶子节点，这个过程叫"),v("strong",[_._v("回表")])]),_._v(" "),v("p",[_._v("如果查询的数据不用回表，通过索引的叶子节点就能查到，则为"),v("strong",[_._v("覆盖索引")])]),_._v(" "),v("p",[_._v("通常优先遍历二级索引，因为成本更低，聚簇索引更大")]),_._v(" "),v("p",[v("strong",[_._v("组合索引的查找：")])]),_._v(" "),v("p",[_._v("采用最左匹配原则，因此字段顺序很重要")]),_._v(" "),v("p",[v("code",[_._v("select * from t_table where a > 1 and b = 2;")]),_._v("//a>1用上了组合索引，b=2没用上")]),_._v(" "),v("p",[v("code",[_._v("select * from t_table where a >= 1 and b = 2;")]),_._v("//a=1,b=2用到了组合索引，a>1用上了组合索引，b=2没用上")]),_._v(" "),v("p",[_._v("对于联合索引的范围查找，后面字段没找到采用索引下推，在联合索引里作判断")]),_._v(" "),v("p",[v("strong",[_._v("索引的大小：")])]),_._v(" "),v("p",[_._v("int类型为4字节，可以为空+1位")]),_._v(" "),v("p",[_._v("变长字节，固定2字节+实际大小（30的话是30*4=120）")]),_._v(" "),v("p",[v("strong",[_._v("索引失效：")])]),_._v(" "),v("ul",[v("li",[v("p",[_._v("如果"),v("strong",[_._v("索引的区分度")]),_._v("很小，即优化器发现某个值在表中的百分比很高（30%），则会忽略索引，进行全表扫描")])]),_._v(" "),v("li",[v("p",[_._v("使用左或左右"),v("strong",[_._v("模糊匹配")]),_._v("，like %xx或like %xx%")])]),_._v(" "),v("li",[v("p",[_._v("查询条件"),v("strong",[_._v("对索引做了计算")]),_._v("，where id+1=10 ，优化成where id= 10-1")])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("隐式类型转换")]),_._v("：总是优先将字符转为数字，因此值为数字，查询项为字符 好于值为字符，查询项为数字")])]),_._v(" "),v("li",[v("p",[_._v("联合索引没有按照"),v("strong",[_._v("最左匹配原则")]),_._v(", or前的是索引列，or后的不是，则索引失效")])])]),_._v(" "),v("p",[v("code",[_._v('select * from table where id ="xx"+1, name="%af";')])]),_._v(" "),v("p",[_._v("**索引优化： **")]),_._v(" "),v("ol",[v("li",[_._v("对于语句"),v("code",[_._v("select * from order where status=1 order by create_time asc")])])]),_._v(" "),v("p",[_._v("​\t建立status和create_time"),v("strong",[_._v("联合索引")]),_._v("，这样查找status后的数据就是按照create_time排好序的")]),_._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[v("p",[_._v("通常用"),v("strong",[_._v("自增主键")]),_._v("，每次插入为追加操作，不用移动数据（避免页分裂）")])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("索引设为非空")]),_._v("，索引存在null使优化器更难优化")])]),_._v(" "),v("li",[v("p",[_._v("可以查看索引的执行计划，查看type字段，其中"),v("strong",[_._v("全表扫描和全索引扫描应该避免")]),_._v("，using filesort（查询语句包含group by且无法用索引完成排序，需要额外排序，降低效率），")])])]),_._v(" "),v("p",[_._v("​\tusing temporary（用"),v("strong",[_._v("临时表保存中间结果")]),_._v("，常见order by或group by字段对查询结果处理了）")]),_._v(" "),v("p",[_._v("​\tusing index表示用了索引覆盖效率高")]),_._v(" "),v("p",[v("strong",[_._v("为什么用B+树作为索引的数据结构")])]),_._v(" "),v("ul",[v("li",[_._v("对比B树")])]),_._v(" "),v("p",[_._v("B树中间节点也存放了数据，在相同的磁盘I/O下，B+树能查询更多的节点")]),_._v(" "),v("p",[_._v("B+树是双链表连接，支持范围的顺序查找")]),_._v(" "),v("ul",[v("li",[_._v("对比 二叉树")])]),_._v(" "),v("p",[_._v("二叉树比起B+树有更深的高度，意味着更多的磁盘IO次数")]),_._v(" "),v("ul",[v("li",[_._v("对比哈希表")])]),_._v(" "),v("p",[_._v("哈希表适合等值查询，不适合范围查询")]),_._v(" "),v("p",[v("strong",[_._v("索引使用场景")])]),_._v(" "),v("p",[_._v("适用字段有限制，经常用于where、group by 和order by字段")]),_._v(" "),v("p",[_._v("不适用经常变更的字段（零钱），出现次数很多，表整体数据少")]),_._v(" "),v("p",[v("strong",[_._v("count查询效率")])]),_._v(" "),v("p",[_._v("count(1)=count(*)>count(主键字段)>count（字段）")]),_._v(" "),v("p",[_._v("为什么通过遍历的方式计数：mvcc机制使得当前时刻有多少记录是不确定的")]),_._v(" "),v("h1",{attrs:{id:"事务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#事务"}},[_._v("#")]),_._v(" 事务")]),_._v(" "),v("p",[v("strong",[_._v("概念：")])]),_._v(" "),v("ul",[v("li",[_._v("原子性：通过undo log回滚日志")]),_._v(" "),v("li",[_._v("隔离性：MVCC或锁")]),_._v(" "),v("li",[_._v("永久性：redo log重做日志")]),_._v(" "),v("li",[_._v("一致性：任意时刻数据库都是有效的——持久性+原子性+隔离性保证")])]),_._v(" "),v("p",[v("strong",[_._v("隔离的问题：")])]),_._v(" "),v("ul",[v("li",[_._v("脏读：读到另个事务没有提交的数据")]),_._v(" "),v("li",[_._v("不可重复读：一个事务内两次读到的不一样")]),_._v(" "),v("li",[_._v("幻读：多次范围查询，查询结果数量不一样")])]),_._v(" "),v("p",[v("strong",[_._v("隔离级别：")])]),_._v(" "),v("ul",[v("li",[_._v("读未提交：")]),_._v(" "),v("li",[_._v("读提交：解决脏读，每次读时生成一个快照")]),_._v(" "),v("li",[_._v("可重复读：解决脏读、不可重复读，事务一开始就生成一个快照")]),_._v(" "),v("li",[_._v("串行化：解决脏读、不可重复读、幻读")])]),_._v(" "),v("p",[_._v("**快照read view：**creator_trx_id 事务id、m_ids未提交事务id列表、min_trx_id 创未提交事务的最小事务ID、max_trx_id下一个事务ID")]),_._v(" "),v("p",[v("img",{attrs:{src:"/%E9%9D%A2%E8%AF%95/image-20240122202705879.png",alt:"image-20240122202705879"}})]),_._v(" "),v("p",[v("strong",[_._v("对幻读的处理：")])]),_._v(" "),v("p",[_._v("对于快照读，不会有幻读，对于当前读，用临键锁解决幻读")]),_._v(" "),v("p",[v("strong",[_._v("哪些情况还会发生幻读：")])]),_._v(" "),v("p",[_._v("当前事务开始后其他事务提交一个值，当前事务快照读读不到，但用update更新数据，或者用for update当前读，都会读到这个值")]),_._v(" "),v("p",[_._v("如果主键自增，不指定主键，则同一时间的两个事务对于两条一样的数据先查询是否存在再插入这是实现不了功能的，会出现幻读")]),_._v(" "),v("p",[_._v("要避免这种情况，在开启事务后马上执行for update这类当前读的语句上锁")]),_._v(" "),v("h1",{attrs:{id:"锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#锁"}},[_._v("#")]),_._v(" 锁")]),_._v(" "),v("p",[v("img",{attrs:{src:"/%E9%9D%A2%E8%AF%95/image-20240903171503981.png",alt:"image-20240903171503981"}})]),_._v(" "),v("h2",{attrs:{id:"全局锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#全局锁"}},[_._v("#")]),_._v(" 全局锁")]),_._v(" "),v("p",[_._v("通常用于全库的备份，开启后对数据的修改和表结构的修改都会阻塞")]),_._v(" "),v("p",[_._v("MVCC机制下可以不需要全局锁")]),_._v(" "),v("h2",{attrs:{id:"表级锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#表级锁"}},[_._v("#")]),_._v(" 表级锁")]),_._v(" "),v("h3",{attrs:{id:"表锁-s-e"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#表锁-s-e"}},[_._v("#")]),_._v(" 表锁(S E)")]),_._v(" "),v("p",[_._v("对当前表的所有操作都会阻塞")]),_._v(" "),v("h3",{attrs:{id:"元数据锁mdl-s-e"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#元数据锁mdl-s-e"}},[_._v("#")]),_._v(" 元数据锁MDL( S E)")]),_._v(" "),v("p",[_._v("CRUD（增删改查）上MDL读锁，表结构的变更上写锁")]),_._v(" "),v("p",[_._v("事务持续期间一直持有")]),_._v(" "),v("h3",{attrs:{id:"意向锁-s-e"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#意向锁-s-e"}},[_._v("#")]),_._v(" 意向锁（S E)")]),_._v(" "),v("p",[_._v("对记录上共享锁或独占锁之前，都要先加意向共享锁或意向独占锁")]),_._v(" "),v("p",[_._v("意向锁之和表锁冲突，不和其他锁包括自己冲突")]),_._v(" "),v("p",[_._v("用于快速判断表里是否有数据，加表锁时可以通过判断有没意向锁快速判断当前表是否可修改，如果没有意向锁就需要一个个记录遍历查询是否有独占锁")]),_._v(" "),v("h3",{attrs:{id:"auto-inc锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#auto-inc锁"}},[_._v("#")]),_._v(" AUTO-INC锁")]),_._v(" "),v("p",[_._v("对于自增的字段数据库赋值时，")]),_._v(" "),v("p",[_._v("方式一：上锁给一个递增的值后释放锁，不需要等整个语句执行完或事务提交才释放锁，效率高，但会出现主从不一致")]),_._v(" "),v("p",[_._v("方式二：上锁给一个递增的值，整个语句执行完后才释放锁，效率低")]),_._v(" "),v("h2",{attrs:{id:"行级锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#行级锁"}},[_._v("#")]),_._v(" 行级锁")]),_._v(" "),v("h3",{attrs:{id:"记录锁s-e"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#记录锁s-e"}},[_._v("#")]),_._v(" 记录锁S E")]),_._v(" "),v("p",[_._v("只对一条记录上锁")]),_._v(" "),v("p",[_._v("事务提交后自动释放锁")]),_._v(" "),v("h3",{attrs:{id:"间隙锁-sx无区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#间隙锁-sx无区别"}},[_._v("#")]),_._v(" 间隙锁（SX无区别）")]),_._v(" "),v("p",[_._v("锁定一个范围（不会对记录上锁），启动事务范围查询时会创建间隙锁")]),_._v(" "),v("p",[_._v("用于在可重复读隔离级别解决幻读问题，在查询一个范围的结果时，范围内不能插入数据，但可修改数据")]),_._v(" "),v("p",[_._v("间隙锁相互兼容")]),_._v(" "),v("h3",{attrs:{id:"插入意向锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#插入意向锁"}},[_._v("#")]),_._v(" 插入意向锁")]),_._v(" "),v("p",[_._v("特殊的间隙锁，锁的是点，表明这个地方不能有插入")]),_._v(" "),v("p",[_._v("一条语句被其他事务的间隙锁阻塞，那么插入操作会阻塞并生成一个插入意向锁等待")]),_._v(" "),v("h3",{attrs:{id:"临建锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#临建锁"}},[_._v("#")]),_._v(" 临建锁")]),_._v(" "),v("p",[_._v("锁定范围+记录，范围内不可修改和插入，对、")]),_._v(" "),v("p",[_._v("相同范围的临建锁互斥")]),_._v(" "),v("h2",{attrs:{id:"行级锁的加锁过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#行级锁的加锁过程"}},[_._v("#")]),_._v(" 行级锁的加锁过程")]),_._v(" "),v("p",[_._v("加锁的对象是索引，基本单位是临建锁（可能退化），对二级索引的加锁，会自动对主键索引也上锁，对一般的记录是加在主键索引上")]),_._v(" "),v("p",[_._v("一般的插入都是隐式锁，只在特殊情况转为显示锁")]),_._v(" "),v("p",[v("strong",[_._v("对唯一索引做等值查询")])]),_._v(" "),v("ul",[v("li",[_._v("如果记录存在，则退化为记录锁")]),_._v(" "),v("li",[_._v("不存在，则退化为第一条大于该记录的间隙锁")])]),_._v(" "),v("p",[v("strong",[_._v("唯一索引范围查询")])]),_._v(" "),v("p",[v("strong",[_._v("非唯一索引等值查询：")])]),_._v(" "),v("ul",[v("li",[_._v("如果记录存在：符合条件的二级索引上临键锁，对应主键上间隙锁，第一个不符合条件的二级索引上间隙锁")]),_._v(" "),v("li",[_._v("记录不存在：第一个不符合条件的二级索引上间隙锁，不对主键索引上锁")])]),_._v(" "),v("p",[_._v("对于数据21，22，39，查询25，此时，对于22和39在一些情况下可以插入，取决于主键id大小在22和39的左边还是右边")]),_._v(" "),v("p",[_._v("**非唯一索引范围查询fg：**全部为临键锁，对于边缘情况的插入依然同上")]),_._v(" "),v("h2",{attrs:{id:"死锁情况"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#死锁情况"}},[_._v("#")]),_._v(" 死锁情况")]),_._v(" "),v("p",[_._v("事务A上间隙锁，事务B上间隙锁，事务A上插入意向锁阻塞，事务B再上插入意向锁阻塞，两个插入意向锁死锁")]),_._v(" "),v("p",[_._v("避免死锁：1. 设置事务等待锁的超时时间，2. 开启主动死锁检测，主动回滚死锁的某一事务 3. 业务角度避免不会出现重复数据")]),_._v(" "),v("h1",{attrs:{id:"日志"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#日志"}},[_._v("#")]),_._v(" 日志")]),_._v(" "),v("ul",[v("li",[_._v("undo log回滚日志： 存储引擎层生成，用于"),v("strong",[_._v("事务回滚和MVCC")]),_._v("，保证原子性。通常时逻辑日志，记录每行记录操作")]),_._v(" "),v("li",[_._v("redo log重做日志：存储引擎层生成，用于硬故障的恢复。记录数据页的物理页修改，恢复到最后一次提交的位置")]),_._v(" "),v("li",[_._v("binlog归档日志：server层生成，用于数据备份和主从复制")])]),_._v(" "),v("h2",{attrs:{id:"undo-log回滚日志"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#undo-log回滚日志"}},[_._v("#")]),_._v(" undo log回滚日志")]),_._v(" "),v("p",[_._v("位于回滚段中，由多个连续的回滚区组成，新的事务写入以追加写入undo log区。")]),_._v(" "),v("p",[_._v("事务开启后，每次执行都会将更新前的数据保存到回滚体制")]),_._v(" "),v("p",[_._v("一个undo log就是一条记录，对同一记录的多次操作串成一个链表，即版本链")]),_._v(" "),v("h2",{attrs:{id:"redo-log物理日志"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#redo-log物理日志"}},[_._v("#")]),_._v(" redo log物理日志")]),_._v(" "),v("p",[_._v("执行一条语句时，先将数据页从磁盘加载到缓存池，更新数据页产生脏页，以追加写将脏页写入redo log文件，同时写入os。（这个过程由一条语句完成，而不是事务结束才完成）")]),_._v(" "),v("p",[_._v("每执行一个事务产生一条undo log和redo log，undo log的修改需要记录对应的redo log，为了通过undo log回退时，也回退undo log的内容")]),_._v(" "),v("p",[_._v("提交事务前发生崩溃，通过undo log回滚到事务开始前，提交事务后崩溃，但还没写入磁盘，则通过redo log恢复")]),_._v(" "),v("h2",{attrs:{id:"redo-log的刷盘时机"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#redo-log的刷盘时机"}},[_._v("#")]),_._v(" redo log的刷盘时机")]),_._v(" "),v("ul",[v("li",[_._v("mysql关闭、")]),_._v(" "),v("li",[_._v("redo log buffer中的记录写入量大于内存空间的一半、")]),_._v(" "),v("li",[_._v("每隔1s、")]),_._v(" "),v("li",[_._v("每次事务的提交")])]),_._v(" "),v("p",[_._v("redo log是以循环写的方式，双指针指向落盘的位置和待写入的位置，如果指针相遇则阻塞，不执行更新操作")]),_._v(" "),v("h2",{attrs:{id:"binlog"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#binlog"}},[_._v("#")]),_._v(" binlog")]),_._v(" "),v("p",[_._v("记录数据表结构和数据修改的日志，用于备份恢复、主从复制。")]),_._v(" "),v("p",[_._v("事务提交时先写入binlog文件再提交")]),_._v(" "),v("p",[v("strong",[_._v("bin log和redo log")])]),_._v(" "),v("ol",[v("li",[_._v("开发：先有bin log，由于其没有crash-safe能力，所以存储引擎增加了redo log。")]),_._v(" "),v("li",[_._v("层级上：bin log server层实现，所有存储引擎可用，redo log是innodb存储引擎，")]),_._v(" "),v("li",[_._v("写入：binlog是追加写，写满一个文件创建文件继续写，redolog是循环写")]),_._v(" "),v("li",[_._v("redo log是物理日志，记录某页做了什么修改")]),_._v(" "),v("li",[_._v("数据：binlog存放的是最终结果")]),_._v(" "),v("li",[_._v("功能：整个数据库被删了，redolog是边写边擦，不可用，可以用binlog恢复")])]),_._v(" "),v("p",[_._v("**结构上：**3种数据格式")]),_._v(" "),v("ul",[v("li",[_._v("STATEMENT: 记录的是操作，可能出现主从不一致")]),_._v(" "),v("li",[_._v("ROW：记录最终修改的数据结果")]),_._v(" "),v("li",[_._v("MIXED：根据情况选择上面两种模式")])]),_._v(" "),v("p",[v("strong",[_._v("binlog实现主从复制：")])]),_._v(" "),v("ol",[v("li",[_._v("写入binlog：主库收到客户端提交事务的请求后，写入binlog日志，再提交事务，更新本地存储数据，返回客户端响应")]),_._v(" "),v("li",[_._v("同步binlog：从库创建线程接收binlog日志，写到暂存日志中")]),_._v(" "),v("li",[_._v("回放binlog：从库创建线程用于回放binlog线程，读暂存日志，更新存储引擎中的数据")])]),_._v(" "),v("p",[_._v("主从库可以实现写主库，读从库，读写并发")]),_._v(" "),v("p",[_._v("一个主库跟2-3个从库，从库多了，主库对每个从库都要创建线程来处理复制请求")]),_._v(" "),v("p",[v("strong",[_._v("主从复制模型：")])]),_._v(" "),v("ul",[v("li",[_._v("同步复制：所有从库复制成功才返回提交结果，实际不会使用")]),_._v(" "),v("li",[_._v("异步复制（默认）：主库提交后，后台同步到从库。主库死机数据就会丢失")]),_._v(" "),v("li",[_._v("半同步复制：主库等待一部分的数据复制成功就返回")])]),_._v(" "),v("p",[_._v("**binlog刷盘时机：**事务执行时写入binlog cache，事务提交时写入内核的page cache，适当的时候落盘")]),_._v(" "),v("h2",{attrs:{id:"一次写入各日志的执行过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一次写入各日志的执行过程"}},[_._v("#")]),_._v(" 一次写入各日志的执行过程")]),_._v(" "),v("p",[_._v("对于update语句")]),_._v(" "),v("ol",[v("li",[_._v("开启事务，先记录相应的undo log，写入buffer pool")]),_._v(" "),v("li",[_._v("执行器调用接口获取记录，判断记录更新前后数据是否一致，不一致再传给innodb层操作")]),_._v(" "),v("li",[_._v("更新内存记录产生脏页写入WAL，写入redo log缓存，定期落盘")]),_._v(" "),v("li",[_._v("更新语句执行完成，记录语句对应的binlog到binlog cache，事务提交时将所有binlog刷新到硬盘")]),_._v(" "),v("li",[_._v("触发两阶段提交")])]),_._v(" "),v("h2",{attrs:{id:"日志不采用两阶段提交会出现主从数据不一致"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#日志不采用两阶段提交会出现主从数据不一致"}},[_._v("#")]),_._v(" 日志不采用两阶段提交会出现主从数据不一致")]),_._v(" "),v("p",[_._v("情景1：")]),_._v(" "),v("ol",[v("li",[_._v("redo log刷入磁盘后，mysql宕机，binlog还没写入，")]),_._v(" "),v("li",[_._v("此时重启后通过redo log恢复到事务执行后，")]),_._v(" "),v("li",[_._v("但binlog没有记录这条，主从架构中，binlog复制到从库，从而出现主从不一致")])]),_._v(" "),v("p",[_._v("情景2：")]),_._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[_._v("binlog刷入磁盘，mysql宕机了，redo log没有写入")]),_._v(" "),v("li",[_._v("重启后，通过redo log恢复，没有这条记录")]),_._v(" "),v("li",[_._v("主从架构中，binlog会复制到从库，在从库恢复数据")])]),_._v(" "),v("h2",{attrs:{id:"两阶段提交"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#两阶段提交"}},[_._v("#")]),_._v(" 两阶段提交")]),_._v(" "),v("p",[_._v("事务没提交时，redolog会持久化到磁盘，binlog不会")]),_._v(" "),v("p",[_._v("属于分布式事务一致性协议")]),_._v(" "),v("ul",[v("li",[_._v("prepare阶段：将事务ID写入redolog，将redolog对应的事务状态设置为prepare，将redo log持久化到磁盘")]),_._v(" "),v("li",[_._v("commit阶段：将事务ID写入到binlog，持久化到磁盘后，将redolog状态设置为commit")])]),_._v(" "),v("p",[_._v("恢复过程：")]),_._v(" "),v("p",[_._v("mysql重启后按顺序扫描redo log文件，遇到处于prepare状态的redo log，那事务ID去binlog查看是否存在")]),_._v(" "),v("p",[_._v("如果存在则说明完成了刷盘，提交事务，不存在则丢弃")]),_._v(" "),v("p",[_._v("因此状态设置为commit这个过程丢失并不影响")]),_._v(" "),v("h2",{attrs:{id:"组提交下的两阶段提交优化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#组提交下的两阶段提交优化"}},[_._v("#")]),_._v(" 组提交下的两阶段提交优化")]),_._v(" "),v("p",[_._v("一般的两阶段提交的问题：")]),_._v(" "),v("p",[_._v("磁盘IO次数高：两阶段涉及到每次事务提交都有redolog和binlog两次刷盘。")]),_._v(" "),v("p",[_._v("锁竞争激烈：多事务下，需要加锁来保证提交的原子性")]),_._v(" "),v("p",[v("strong",[_._v("改进：")])]),_._v(" "),v("p",[_._v("prepare阶段不变，写入redolog，并设置为prepare")]),_._v(" "),v("p",[_._v("commit阶段分为三个过程：")]),_._v(" "),v("ul",[v("li",[_._v("flush阶段：leader对同组的redo log做一次刷盘，多个事务按序将binlog从cache写入文件，不刷盘（写入操作系统的page cache）")]),_._v(" "),v("li",[_._v("sync阶段：等待一定时间或等待事务数量达到一个值，将多个binlog刷盘操作合并成一个刷盘")]),_._v(" "),v("li",[_._v("commit阶段：通知redo log作commit")])]),_._v(" "),v("p",[_._v("每个阶段对应一个队列并用锁保护，第一个进入队列的事务会成为leader领导所有事务")]),_._v(" "),v("p",[v("img",{attrs:{src:"/%E9%9D%A2%E8%AF%95/image-20240125172306542.png",alt:"image-20240125172306542"}})]),_._v(" "),v("h1",{attrs:{id:"buffer-pool"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#buffer-pool"}},[_._v("#")]),_._v(" buffer pool")]),_._v(" "),v("p",[_._v("位于innodb内，读取数据如果在buffer pool就直接读取，不在则读后台。修改数据则修改后设置为脏页，适当时机刷入磁盘")]),_._v(" "),v("p",[_._v("默认大小为128MB，通常可以设置为物理内存的60-80%（这里是逻辑页大小，实际有页读写了才分配物理空间）")]),_._v(" "),v("ul",[v("li",[_._v("对"),v("strong",[_._v("空闲页")]),_._v("采用空闲链表管理")]),_._v(" "),v("li",[_._v("干净页")]),_._v(" "),v("li",[_._v("脏页：flush链表管理脏页，用于快速找出脏页，在适当时机写入磁盘")])]),_._v(" "),v("p",[_._v("这个适当时机是指：")]),_._v(" "),v("ul",[v("li",[_._v("redo log日志满了")]),_._v(" "),v("li",[_._v("buffer pool满了淘汰脏页")]),_._v(" "),v("li",[_._v("mysql认为空闲，定期刷入脏页")]),_._v(" "),v("li",[_._v("mysql关闭")])]),_._v(" "),v("h2",{attrs:{id:"提高缓存命中率"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#提高缓存命中率"}},[_._v("#")]),_._v(" 提高缓存命中率")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("预读失效：加载的相邻页没有被访问")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("解决：划分young区域、old区域，默认比例63：37。")]),_._v(" "),v("p",[_._v("​\t\t\t预读的页加入old，真正访问的页加入young区域")])])])]),_._v(" "),v("li",[v("p",[_._v("buffer pool污染：一个sql语句扫描了大量数据，使得大量热数据被淘汰")]),_._v(" "),v("ul",[v("li",[_._v("解决：记录第一次加入old区域的时间，后续访问时间超过1s时才移动到young区域头部（即必须满足被访问和在old区域超过1s才会插入到young区域）")])])]),_._v(" "),v("li",[v("p",[_._v("young区域节点频繁访问移动到头部")]),_._v(" "),v("ul",[v("li",[_._v("解决：young前1/4的区域不会移动到链表头部")])])])]),_._v(" "),v("p",[v("img",{attrs:{src:"/%E9%9D%A2%E8%AF%95/image-20240125173019734.png",alt:"image-20240125173019734"}})])])}),[],!1,null,null,null);v.default=a.exports}}]);