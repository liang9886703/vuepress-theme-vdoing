(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{396:function(t,e,a){"use strict";a.r(e);var _=a(7),s=Object(_.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"调试编译"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#调试编译"}},[t._v("#")]),t._v(" 调试编译")]),t._v(" "),e("h2",{attrs:{id:"ldd-查看程序依赖库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ldd-查看程序依赖库"}},[t._v("#")]),t._v(" ldd 查看程序依赖库")]),t._v(" "),e("p",[e("strong",[t._v("ldd 可执行文件")]),t._v("：显示文件依赖库，和对应库的位置")]),t._v(" "),e("h1",{attrs:{id:"运行调试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行调试"}},[t._v("#")]),t._v(" 运行调试")]),t._v(" "),e("h2",{attrs:{id:"strace-查看进程执行的系统调用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#strace-查看进程执行的系统调用"}},[t._v("#")]),t._v(" strace 查看进程执行的系统调用")]),t._v(" "),e("p",[e("code",[t._v("strace -p process_pid")]),t._v("实时打印进程的系统调用栈")]),t._v(" "),e("p",[e("code",[t._v("strace -o filename")]),t._v("将输出内容写入文件内")]),t._v(" "),e("p",[e("strong",[t._v("通常的完整用法：")])]),t._v(" "),e("p",[e("code",[t._v("strace -rttTp process_pid -e trace=all")])]),t._v(" "),e("ul",[e("li",[t._v("r 打印出每个系统调用的相对时间")]),t._v(" "),e("li",[t._v("tt 以us为单位显示")]),t._v(" "),e("li",[t._v("T 显示每个调用的自己的耗时")]),t._v(" "),e("li",[t._v("e 指定跟踪的系统调用类型")])]),t._v(" "),e("p",[e("strong",[t._v("-e参数的具体使用：")])]),t._v(" "),e("p",[e("code",[t._v("-e trace=[set]")]),t._v(" 跟踪指定的系统调用，如open、close、socket")]),t._v(" "),e("p",[e("code",[t._v("-e trace=file")]),t._v(" 只跟踪有关文件操作的系统调用.")]),t._v(" "),e("p",[e("code",[t._v("-e trace=process")]),t._v(" 只跟踪有关进程控制的系统调用.")]),t._v(" "),e("p",[e("code",[t._v("-e trace=network")]),t._v(" 跟踪与网络有关的所有系统调用.")]),t._v(" "),e("p",[e("code",[t._v("-e strace=[signal]")]),t._v(" 跟踪所有与系统信号有关的系统调用")]),t._v(" "),e("p",[e("code",[t._v("-e signal=set")]),t._v(" 指定跟踪的系统信号.默认为all.如signal=ISIGIO(或者signal=lio)表示不跟踪SIGIO信号.")]),t._v(" "),e("p",[e("strong",[t._v("其他参数：")])]),t._v(" "),e("ul",[e("li",[t._v("-f 跟踪目标进程和子进程")]),t._v(" "),e("li",[t._v("-c 统计每个进程调用的时间、调用次数、错误次数，（非实时，手动结束后才打印出来）")])]),t._v(" "),e("h2",{attrs:{id:"ltrace-查看进程执行的库函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ltrace-查看进程执行的库函数"}},[t._v("#")]),t._v(" ltrace 查看进程执行的库函数")]),t._v(" "),e("p",[t._v("同strace")]),t._v(" "),e("h2",{attrs:{id:"pstack-查看指定进程的调用栈"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pstack-查看指定进程的调用栈"}},[t._v("#")]),t._v(" pstack 查看指定进程的调用栈")]),t._v(" "),e("p",[t._v("gdb自带，是封装了gdb的一个脚本工具")]),t._v(" "),e("p",[e("code",[t._v("pstack [process_pid]")]),t._v(" # 打印指定进程当前的调用栈")]),t._v(" "),e("h2",{attrs:{id:"pstree-显示进程和子进程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pstree-显示进程和子进程"}},[t._v("#")]),t._v(" pstree 显示进程和子进程")]),t._v(" "),e("p",[e("code",[t._v("pstree -p process_pid")])]),t._v(" "),e("h2",{attrs:{id:"addr2line-显示指定地址的函数信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#addr2line-显示指定地址的函数信息"}},[t._v("#")]),t._v(" addr2line 显示指定地址的函数信息")]),t._v(" "),e("p",[t._v("如果程序出现了段错误，显示指定地址出错，可以使用这个命令查看这个地址的信息")]),t._v(" "),e("p",[e("code",[t._v("file 可执行文件")]),t._v(" # 查看可执行文件的信息，判断是否有调试信息")]),t._v(" "),e("p",[e("code",[t._v("addr2line -e 可执行文件 -f 地址 -p")]),t._v("（-p更可读的方式输出）")])])}),[],!1,null,null,null);e.default=s.exports}}]);