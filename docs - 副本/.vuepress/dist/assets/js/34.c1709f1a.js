(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{402:function(v,_,a){"use strict";a.r(_);var t=a(7),s=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"服务端开发"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#服务端开发"}},[v._v("#")]),v._v(" 服务端开发")]),v._v(" "),_("h1",{attrs:{id:"文件io函数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#文件io函数"}},[v._v("#")]),v._v(" 文件IO函数")]),v._v(" "),_("p",[v._v("dup/dup2函数：重定向标准输入输出")]),v._v(" "),_("p",[v._v("readv/writev：对分散的内存块执行读写操作")]),v._v(" "),_("p",[v._v("mmap/munmap：共享内存")]),v._v(" "),_("p",[v._v("零拷贝：")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("sendfile")]),v._v("文件向socket进行数据传输")]),v._v(" "),_("li",[_("code",[v._v("splice")]),v._v(" 文件描述符之间传输")]),v._v(" "),_("li",[_("code",[v._v("tee")]),v._v(" 在两个管道文件描述符间拷贝数据，并不消耗数据")])]),v._v(" "),_("h1",{attrs:{id:"linux服务器程序规范"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#linux服务器程序规范"}},[v._v("#")]),v._v(" linux服务器程序规范")]),v._v(" "),_("h2",{attrs:{id:"系统日志"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#系统日志"}},[v._v("#")]),v._v(" 系统日志")]),v._v(" "),_("p",[v._v("能接收用户进程和内核打出的日志")]),v._v(" "),_("ul",[_("li",[v._v("用户进程调用syslog函数生成系统日志，写入本地/dev/log中（socket类型）")]),v._v(" "),_("li",[v._v("rsyslogd(syslogd)守护进程监听文件以获取用户进程的输出，保存到/var/log/debug、/var/log/messages、/var/log/kern.log")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%8F%91/./image-20240318161337430.png",alt:"image-20240318161337430"}})]),v._v(" "),_("p",[v._v("/etc/rsyslog.conf中配置输入输出路径，监听范围（UDP/TCP/指定端口）")]),v._v(" "),_("h2",{attrs:{id:"用户信息"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#用户信息"}},[v._v("#")]),v._v(" 用户信息")]),v._v(" "),_("p",[v._v("一个进程同时有用户id和有效id")]),v._v(" "),_("ul",[_("li",[v._v("真实用户ID UID  启动进程的用户ID")]),v._v(" "),_("li",[v._v("有效用户ID EUID   访问权限使用这个ID")]),v._v(" "),_("li",[v._v("真实组ID GID")]),v._v(" "),_("li",[v._v("有效组ID EGID")])]),v._v(" "),_("p",[v._v("有效用户为root的进程为特权进程")]),v._v(" "),_("h2",{attrs:{id:"进程间关系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程间关系"}},[v._v("#")]),v._v(" 进程间关系")]),v._v(" "),_("ul",[_("li",[v._v("SID：会话ID")]),v._v(" "),_("li",[v._v("PPID：父ID")]),v._v(" "),_("li",[v._v("PGID：进程组")])]),v._v(" "),_("p",[v._v("Linux下每个进程都属于一个"),_("strong",[v._v("进程组（PGID）")]),v._v("，每个进程都有首领进程，进程组没有全部结束，首领进程不能结束")]),v._v(" "),_("p",[v._v("非首领进程可以调用"),_("code",[v._v("setsid")]),v._v("函数创建一个"),_("strong",[v._v("会话")]),v._v("（SID）：")]),v._v(" "),_("ul",[_("li",[v._v("当前进程称为会话的首领，且是新会话的唯一成员")]),v._v(" "),_("li",[v._v("成为首领进程，PGID=该进程的PID")]),v._v(" "),_("li",[v._v("离开终端")])]),v._v(" "),_("p",[v._v("例子：")]),v._v(" "),_("p",[_("img",{attrs:{src:"/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%8F%91/./image-20240318165011780.png",alt:"image-20240318165011780"}})]),v._v(" "),_("p",[_("img",{attrs:{src:"/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%8F%91/./image-20240318165018022.png",alt:"image-20240318165018022"}})]),v._v(" "),_("h2",{attrs:{id:"系统资源限制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#系统资源限制"}},[v._v("#")]),v._v(" 系统资源限制")]),v._v(" "),_("p",[v._v("使用这个函数对资源的修改仅限当前程序之后的执行")]),v._v(" "),_("p",[v._v("如果要永久性改变配置，可以修改Linux的配置文件")]),v._v(" "),_("ul",[_("li",[v._v("虚拟内存总量")]),v._v(" "),_("li",[v._v("coredump文件大小")]),v._v(" "),_("li",[v._v("CPU时间")]),v._v(" "),_("li",[v._v("内存限制：数据段大小限制，栈、堆空间大小")]),v._v(" "),_("li",[v._v("文件描述符数量限制")]),v._v(" "),_("li",[v._v("进程数限制")])]),v._v(" "),_("h2",{attrs:{id:"服务程序后台化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#服务程序后台化"}},[v._v("#")]),v._v(" 服务程序后台化")]),v._v(" "),_("p",[_("code",[v._v("int daemon(int nochdir, int noclose)")]),v._v("//第一个参数是否改变工作目录，第二个参数是否标准输入输出重定向")]),v._v(" "),_("p",[v._v("原理：")]),v._v(" "),_("h1",{attrs:{id:"服务器程序框架"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#服务器程序框架"}},[v._v("#")]),v._v(" 服务器程序框架")]),v._v(" "),_("p",[v._v("C/S请求响应模型：访问量过大，服务器压力大")]),v._v(" "),_("p",[v._v("P2P点对点模型：每台服务器消耗服务并提供服务。用户传输的请求过多会加剧网络负载")]),v._v(" "),_("p",[v._v("P2P通常有专门的发现服务器，使得节点之间相互发现，")]),v._v(" "),_("h2",{attrs:{id:"服务网关"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#服务网关"}},[v._v("#")]),v._v(" 服务网关")]),v._v(" "),_("p",[v._v("微服务的入口，客户端的请求首先到服务网关")]),v._v(" "),_("ul",[_("li",[v._v("权限管理：校验用户请求资格")]),v._v(" "),_("li",[v._v("路由和负载均衡：将请求转给目标服务")]),v._v(" "),_("li",[v._v("限流：按照指定流量限制请求")])]),v._v(" "),_("h3",{attrs:{id:"业务形态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#业务形态"}},[v._v("#")]),v._v(" 业务形态")]),v._v(" "),_("ul",[_("li",[v._v("**解耦不同网络环境：**内外网&生产办公环境")]),v._v(" "),_("li",[v._v("**公共业务切面：**安全认证&限流熔断&监控")]),v._v(" "),_("li",[_("strong",[v._v("灵活的流量控制")]),v._v("：\n"),_("ul",[_("li",[_("strong",[v._v("私有协议")]),v._v("，拦截用户的HTTP请求，走私有协议到服务器")]),v._v(" "),_("li",[_("strong",[v._v("链路优化")]),v._v("：让远程用户就近访问")]),v._v(" "),_("li",[v._v("**异地多活：**根据业务的维度进行分流")])])]),v._v(" "),_("li",[_("strong",[v._v("定制化网关")]),v._v("：对不同的业务进行独立的定制化网关，由控制面对网关的差异特性统一管理")]),v._v(" "),_("li",[_("strong",[v._v("对业务层统一的接口：")]),v._v(" "),_("ul",[_("li",[v._v("协议适配层：屏蔽不同协议的编解码、交互方式，对TCP的连接处理等")]),v._v(" "),_("li",[v._v("通用中间模型和接口：业务面向中间模型和接口编程")])])])]),v._v(" "),_("h2",{attrs:{id:"服务器框架"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#服务器框架"}},[v._v("#")]),v._v(" 服务器框架")]),v._v(" "),_("p",[_("img",{attrs:{src:"/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%8F%91/./image-20240319170226732.png",alt:"image-20240319170226732"}})]),v._v(" "),_("h2",{attrs:{id:"高并发模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#高并发模式"}},[v._v("#")]),v._v(" 高并发模式")]),v._v(" "),_("p",[v._v("并发编程对I/O密集型有提升效率的意义，计算密集型不适用于并发编程")]),v._v(" "),_("h3",{attrs:{id:"半同步-半异步模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#半同步-半异步模式"}},[v._v("#")]),v._v(" 半同步/半异步模式")]),v._v(" "),_("p",[v._v("这里的同步是指程序完全按照代码顺序执行，异步指由系统事件(中断、信号)驱动程序的执行")]),v._v(" "),_("ul",[_("li",[v._v("异步线程的执行效率高，但难以调试和拓展，不适用于大量并发")]),v._v(" "),_("li",[v._v("同步线程效率低，实时性差，但逻辑简单")])]),v._v(" "),_("p",[v._v("服务器适用于将两个结合起来，即半同步/半异步模式，同步线程处理客户端逻辑，异步线程处理IO事件")]),v._v(" "),_("p",[v._v("等同于多reactor多线程的方案")]),v._v(" "),_("h3",{attrs:{id:"领导者-追随者模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#领导者-追随者模式"}},[v._v("#")]),v._v(" 领导者/追随者模式")]),v._v(" "),_("p",[v._v("多个工作线程轮流获得事件集合")]),v._v(" "),_("p",[v._v("对线程分类，leader线程负责监听和分发，follower处理事件。leader可以让出leader自己处理任务，也可以指定follower处理事件")]),v._v(" "),_("p",[_("img",{attrs:{src:"/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%8F%91/./image-20240319143405281.png",alt:"image-20240319143405281"}})]),v._v(" "),_("p",[v._v("线程集中存在互斥关系")]),v._v(" "),_("h2",{attrs:{id:"有限状态机"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#有限状态机"}},[v._v("#")]),v._v(" 有限状态机")]),v._v(" "),_("p",[v._v("状态机每个状态独立，状态之间没有相互转移")]),v._v(" "),_("p",[v._v("每次循环，状态机获取一个数据包，通过类型判断如何处理")]),v._v(" "),_("p",[v._v("main函数解析字段，读取一条完整的数据后判断包类型，交给主状态机处理，记录当前状态，调用对应的函数处理状态")]),v._v(" "),_("h2",{attrs:{id:"提高服务器性能"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#提高服务器性能"}},[v._v("#")]),v._v(" 提高服务器性能")]),v._v(" "),_("ol",[_("li",[v._v("池")])]),v._v(" "),_("p",[v._v("资源在启动之初创建并初始化，需要时直接获取无须动态分配，避免了对内核的频繁访问，可能造成资源浪费")]),v._v(" "),_("p",[v._v("内存池、进程\\线程池、连接池")]),v._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[v._v("避免数据复制")])]),v._v(" "),_("p",[v._v("零拷贝，共享内存")]),v._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[v._v("上下文切换")])]),v._v(" "),_("p",[v._v("工作线程的使用应和CPU的数量一起考虑，对于IO密集型任务，不应然线程切换占用大量CPU时间")]),v._v(" "),_("ol",{attrs:{start:"4"}},[_("li",[v._v("锁")])]),v._v(" "),_("p",[v._v("引入无锁方案，或者减少锁的颗粒度")]),v._v(" "),_("ol",{attrs:{start:"5"}},[_("li",[v._v("IO多路复用")])]),v._v(" "),_("p",[v._v("同时监听多个接口，TCP和UDP可以是同个端口")]),v._v(" "),_("h1",{attrs:{id:"io处理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#io处理"}},[v._v("#")]),v._v(" IO处理")]),v._v(" "),_("h2",{attrs:{id:"xinetd"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#xinetd"}},[v._v("#")]),v._v(" xinetd")]),v._v(" "),_("p",[v._v("网络守护进程服务程序，管理多种轻量级internet服务")]),v._v(" "),_("p",[_("img",{attrs:{src:"/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%8F%91/./image-20240319151425233.png",alt:"image-20240319151425233"}})]),v._v(" "),_("h1",{attrs:{id:"信号"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#信号"}},[v._v("#")]),v._v(" 信号")]),v._v(" "),_("h2",{attrs:{id:"统一事件源"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#统一事件源"}},[v._v("#")]),v._v(" 统一事件源")]),v._v(" "),_("p",[v._v("可以使用信号掩码来暂时不响应信号，此时收到的信号会被挂起（重复的信号只算一个），取消屏蔽后会立即响应信号")]),v._v(" "),_("p",[v._v("为了不让信号屏蔽太久，信号处理函数写入管道，主函数用epoll监听管道文件和其他套接字，对收到的管道消息读取并处理。从而将信号事件和IO事件、连接事件，统一处理")]),v._v(" "),_("h1",{attrs:{id:"定时器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#定时器"}},[v._v("#")]),v._v(" 定时器")]),v._v(" "),_("h2",{attrs:{id:"基于sigalrm信号实现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基于sigalrm信号实现"}},[v._v("#")]),v._v(" 基于SIGALRM信号实现")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("升序链表的定时器")]),v._v("：SIGALRM信号定时触发，每次触发，就执行一次TICK，TICK中检测链表上到期的任务")])]),v._v(" "),_("p",[v._v("特点：")]),v._v(" "),_("ul",[_("li",[v._v("如果某个任务的超时时间不是T的整数倍，精度会略有偏差")]),v._v(" "),_("li",[v._v("每次插入时，需要遍历链表找到自己的位置（按到期时间有序的链表），插入的时间复杂度O(N)")])]),v._v(" "),_("p",[v._v("使用场景：周期遍历关闭那些非活动连接")]),v._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[v._v("IO复用系统的超时：")])]),v._v(" "),_("h2",{attrs:{id:"时间轮"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#时间轮"}},[v._v("#")]),v._v(" 时间轮")]),v._v(" "),_("p",[v._v("该时间轮有N个槽，定时器通过超时时间%N的计算方式映射到每个槽上，每个槽为一个单链表")]),v._v(" "),_("p",[v._v("每次tick时，si指针移动一位，从而均匀的映射到各个链表上，链表内无序")]),v._v(" "),_("p",[_("img",{attrs:{src:"/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%8F%91/./image-20240319170205595.png",alt:"image-20240319170205595"}})]),v._v(" "),_("p",[_("img",{attrs:{src:"/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%8F%91/./image-20240319170549739.png",alt:"image-20240319170549739"}})]),v._v(" "),_("ul",[_("li",[v._v("使槽间隔si变小，能提高精度，")]),v._v(" "),_("li",[v._v("要提高执行效率，则增大N值，将链表分散均匀")])]),v._v(" "),_("p",[v._v("复杂的时间轮，可能有多个轮子，不同轮子有不同的粒度。")]),v._v(" "),_("p",[v._v("插入时间复杂度O（n），执行时间复杂度O（n），需要遍历链表找到超时的定时器。")]),v._v(" "),_("h2",{attrs:{id:"时间堆"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#时间堆"}},[v._v("#")]),v._v(" 时间堆")]),v._v(" "),_("p",[v._v("将超时时间最小的定时器的超时其作为心搏间隔，超时时这个定时器必然到期，再选出下一个超时时间最小的一个定时器")]),v._v(" "),_("p",[v._v("最小堆结构适合实现这种方案")]),v._v(" "),_("h1",{attrs:{id:"高性能网络通信"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#高性能网络通信"}},[v._v("#")]),v._v(" 高性能网络通信")]),v._v(" "),_("h2",{attrs:{id:"读写数据"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#读写数据"}},[v._v("#")]),v._v(" 读写数据")]),v._v(" "),_("p",[v._v("对于可写事件，如果一开始就把可写socket注册到epoll，即使没有事件要写，epoll也会因为文件描述符变的可写而唤醒应用。并且不急于写数据的套接字在epoll里增加内核维护这一集合的时间")]),v._v(" "),_("p",[v._v("正确的做法：对于发送数据时注册写socket到epoll里，如果有发送缓存区空了会触发可写事件从而执行写入（这就要求应用层也要有发送缓冲区），写入完成后，再从epoll里移除这个socket")]),v._v(" "),_("h2",{attrs:{id:"主循环"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#主循环"}},[v._v("#")]),v._v(" 主循环")]),v._v(" "),_("p",[v._v("监听线程/进程函数的循环")]),v._v(" "),_("p",[v._v("为了当没有网络事件但又让handle_other_thing()函数能够即使执行，而不用等到epoll超时才执行，可以设置一个特殊的wakeup fd绑定到epoll里，当有其他任务需要处理时，写入这个fd数据让其可读")]),v._v(" "),_("p",[v._v("可以调用管道来生成这个fd，也可以使用eventfd（）、socketpair()")]),v._v(" "),_("p",[v._v("唤醒后要将fd的数据读出来，否则fd的接收缓冲区写满会导致写入失败")]),v._v(" "),_("p",[v._v("另外socket 上的send和recv是原子性的，多个线程同时send或同时recv并不会崩溃，但会造成包的乱序，send和recv多线程是可以的")]),v._v(" "),_("h2",{attrs:{id:"发送-接收缓冲区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#发送-接收缓冲区"}},[v._v("#")]),v._v(" 发送/接收缓冲区")]),v._v(" "),_("p",[v._v("要求：")]),v._v(" "),_("ul",[_("li",[v._v("缓冲区数据有序，头部取出，尾部加入")]),v._v(" "),_("li",[v._v("需要有扩容机制")]),v._v(" "),_("li",[v._v("支持各种数据类型")]),v._v(" "),_("li",[v._v("对于接收缓冲区需要找到数据包的结尾标识")])]),v._v(" "),_("p",[v._v("一种实现：一块连续内存分为两部分，预留空间（存放元数据信息等）和存储空间，用读写指针标明读写位置")]),v._v(" "),_("p",[_("strong",[v._v("当对端一直不接受数据如何处理")])]),v._v(" "),_("ol",[_("li",[v._v("缓冲区需要有大小上限，当数据存入超过上限时认为连接出现了问题，关闭连接回收资源")]),v._v(" "),_("li",[v._v("一部分数据在待发送缓冲区，缓冲区足够，但对端不接收使得也不能释放。因此需要设置定时器每隔一段时间检查发送缓冲区为发出去的数据是否超时。超时认为出现了问题关闭连接")])]),v._v(" "),_("h2",{attrs:{id:"网络库中的各个层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#网络库中的各个层"}},[v._v("#")]),v._v(" 网络库中的各个层")]),v._v(" "),_("p",[v._v("session层：")]),v._v(" "),_("p",[v._v("业务逻辑，依赖connection")]),v._v(" "),_("p",[v._v("通常用weak_ptr指针指向connection层的对象，因为connection对象可能因为自身的运行而销毁。可能用sessionmanager对象统一管理这些session对象的生命周期")]),v._v(" "),_("p",[v._v("session根据具体的业务可能分为不同对象")]),v._v(" "),_("p",[v._v("Connection层：")]),v._v(" "),_("p",[v._v("通常和一个客户端的连接对应一个connection对象，记录该路连接的各种状态信息，提供对网络事件的处理接口，掌管channel对象的生命周期。有时可能会用server对象来集中管理多个connection对象")]),v._v(" "),_("p",[v._v("channel层：")]),v._v(" "),_("p",[v._v("一般持有一个socket，负责数据收发，记录需要监听的各种网络事件状态，提供对事件状态判断和增删改的接口")]),v._v(" "),_("p",[v._v("socket层：")]),v._v(" "),_("p",[v._v("对socket进行封装，实现跨平台，或更易于可用")]),v._v(" "),_("h1",{attrs:{id:"多进程编程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#多进程编程"}},[v._v("#")]),v._v(" 多进程编程")]),v._v(" "),_("h2",{attrs:{id:"创建"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#创建"}},[v._v("#")]),v._v(" 创建")]),v._v(" "),_("p",[v._v("fork()，父进程返回子进程PID，子进程返回0")]),v._v(" "),_("ul",[_("li",[v._v("复制当前进程，创建进程表项，")]),v._v(" "),_("li",[v._v("复制数据和代码，采用写时复制")]),v._v(" "),_("li",[v._v("子进程以共享的方式获得父进程的打开文件（计数器+1）")])]),v._v(" "),_("p",[v._v("exec系统调用")]),v._v(" "),_("ul",[_("li",[v._v("在子进程中执行其他程序，替换当前进程映像")]),v._v(" "),_("li",[v._v("正常执行后exec将不会返回，exec后的代码不会执行")]),v._v(" "),_("li",[v._v("exec不会关闭原程序打开的文件描述符")])]),v._v(" "),_("p",[v._v("**僵尸进程：**父进程通常需要跟踪子进程的退出状态，如果父进程结束，内核不会立即释放子进程表项，等待父进程的退出操作，子进程结束后，父进程读取其退出状态之前，此时子进程是僵尸态。")]),v._v(" "),_("p",[v._v("**孤儿进程：**父进程异常结束，子进程被init进程接管，子进程退出前也是僵尸态")]),v._v(" "),_("h1",{attrs:{id:"场景题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#场景题"}},[v._v("#")]),v._v(" 场景题")]),v._v(" "),_("h2",{attrs:{id:"高性能服务器需要的技术"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#高性能服务器需要的技术"}},[v._v("#")]),v._v(" 高性能服务器需要的技术")]),v._v(" "),_("p",[_("img",{attrs:{src:"/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%8F%91/image-20240905165403203.png",alt:"image-20240905165403203"}})]),v._v(" "),_("p",[v._v("一致性哈希做负载均衡，数据写入不同服务器")]),v._v(" "),_("h2",{attrs:{id:"秒杀系统"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#秒杀系统"}},[v._v("#")]),v._v(" 秒杀系统")]),v._v(" "),_("p",[_("img",{attrs:{src:"/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%8F%91/image-20240905171056050.png",alt:"image-20240905171056050"}})]),v._v(" "),_("h2",{attrs:{id:"设计一个本地缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#设计一个本地缓存"}},[v._v("#")]),v._v(" 设计一个本地缓存")]),v._v(" "),_("p",[v._v("内存上：")]),v._v(" "),_("ol",[_("li",[v._v("选择合适的数据结构")]),v._v(" "),_("li",[v._v("设置上限")]),v._v(" "),_("li",[v._v("清除策略")]),v._v(" "),_("li",[v._v("过期时间")])]),v._v(" "),_("p",[v._v("使用上：")]),v._v(" "),_("ol",[_("li",[v._v("简明的接口")]),v._v(" "),_("li",[v._v("线程安全")]),v._v(" "),_("li",[v._v("阻塞机制")]),v._v(" "),_("li",[v._v("是否持久化")])]),v._v(" "),_("p",[v._v("更新：")]),v._v(" "),_("p",[v._v("对时间性能的要求决定更新策略")]),v._v(" "),_("h2",{attrs:{id:"设计一个rpc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#设计一个rpc"}},[v._v("#")]),v._v(" 设计一个RPC")]),v._v(" "),_("p",[_("img",{attrs:{src:"/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%8F%91/image-20240905172123841.png",alt:"image-20240905172123841"}})])])}),[],!1,null,null,null);_.default=s.exports}}]);